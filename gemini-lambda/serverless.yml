service: gemini-api

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-south-1
  timeout: 10
  environment:
    LOCATIONS_TABLE: Locations
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:Scan
            - dynamodb:GetItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/Locations

functions:
  askGemini:
    handler: handler.askGemini
    events:
      - http:
          path: geminiQueryHandler
          method: post
          cors: true

  recommendForYou:
    handler: recommendationForYou.recommendForYou
    events:
      - http:
          path: for-you
          method: get
          cors: true

  storeLocation:
    handler: locationApi.storeLocation
    events:
      - http:
          path: locations
          method: post
          cors: true

  getLocations:
    handler: locationApi.getLocations
    events:
      - http:
          path: locations
          method: get
          cors: true

  getLocationById:
    handler: locationApi.getLocationById
    events:
      - http:
          path: locations/{id}
          method: get
          cors: true


plugins:
  - serverless-dotenv-plugin

custom:
  dotenv: true

resources:
  Resources:
    LocationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Locations
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
